{"ast":null,"code":"import assertString from './util/assertString';\nimport merge from './util/merge';\nvar default_fqdn_options = {\n  require_tld: true,\n  allow_underscores: false,\n  allow_trailing_dot: false,\n  allow_numeric_tld: false,\n  allow_wildcard: false\n};\nexport default function isFQDN(str, options) {\n  assertString(str);\n  options = merge(options, default_fqdn_options);\n  /* Remove the optional trailing dot before checking validity */\n\n  if (options.allow_trailing_dot && str[str.length - 1] === '.') {\n    str = str.substring(0, str.length - 1);\n  }\n  /* Remove the optional wildcard before checking validity */\n\n\n  if (options.allow_wildcard === true && str.indexOf('*.') === 0) {\n    str = str.substring(2);\n  }\n\n  var parts = str.split('.');\n  var tld = parts[parts.length - 1];\n\n  if (options.require_tld) {\n    // disallow fqdns without tld\n    if (parts.length < 2) {\n      return false;\n    }\n\n    if (!/^([a-z\\u00A1-\\u00A8\\u00AA-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]{2,}|xn[a-z0-9-]{2,})$/i.test(tld)) {\n      return false;\n    } // disallow spaces\n\n\n    if (/\\s/.test(tld)) {\n      return false;\n    }\n  } // reject numeric TLDs\n\n\n  if (!options.allow_numeric_tld && /^\\d+$/.test(tld)) {\n    return false;\n  }\n\n  return parts.every(function (part) {\n    if (part.length > 63) {\n      return false;\n    }\n\n    if (!/^[a-z_\\u00a1-\\uffff0-9-]+$/i.test(part)) {\n      return false;\n    } // disallow full-width chars\n\n\n    if (/[\\uff01-\\uff5e]/.test(part)) {\n      return false;\n    } // disallow parts starting or ending with hyphen\n\n\n    if (/^-|-$/.test(part)) {\n      return false;\n    }\n\n    if (!options.allow_underscores && /_/.test(part)) {\n      return false;\n    }\n\n    return true;\n  });\n}","map":{"version":3,"sources":["/Users/jackarthurstorror/ideaProjects/where/frontend/node_modules/validator/es/lib/isFQDN.js"],"names":["assertString","merge","default_fqdn_options","require_tld","allow_underscores","allow_trailing_dot","allow_numeric_tld","allow_wildcard","isFQDN","str","options","length","substring","indexOf","parts","split","tld","test","every","part"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,qBAAzB;AACA,OAAOC,KAAP,MAAkB,cAAlB;AACA,IAAIC,oBAAoB,GAAG;AACzBC,EAAAA,WAAW,EAAE,IADY;AAEzBC,EAAAA,iBAAiB,EAAE,KAFM;AAGzBC,EAAAA,kBAAkB,EAAE,KAHK;AAIzBC,EAAAA,iBAAiB,EAAE,KAJM;AAKzBC,EAAAA,cAAc,EAAE;AALS,CAA3B;AAOA,eAAe,SAASC,MAAT,CAAgBC,GAAhB,EAAqBC,OAArB,EAA8B;AAC3CV,EAAAA,YAAY,CAACS,GAAD,CAAZ;AACAC,EAAAA,OAAO,GAAGT,KAAK,CAACS,OAAD,EAAUR,oBAAV,CAAf;AACA;;AAEA,MAAIQ,OAAO,CAACL,kBAAR,IAA8BI,GAAG,CAACA,GAAG,CAACE,MAAJ,GAAa,CAAd,CAAH,KAAwB,GAA1D,EAA+D;AAC7DF,IAAAA,GAAG,GAAGA,GAAG,CAACG,SAAJ,CAAc,CAAd,EAAiBH,GAAG,CAACE,MAAJ,GAAa,CAA9B,CAAN;AACD;AACD;;;AAGA,MAAID,OAAO,CAACH,cAAR,KAA2B,IAA3B,IAAmCE,GAAG,CAACI,OAAJ,CAAY,IAAZ,MAAsB,CAA7D,EAAgE;AAC9DJ,IAAAA,GAAG,GAAGA,GAAG,CAACG,SAAJ,CAAc,CAAd,CAAN;AACD;;AAED,MAAIE,KAAK,GAAGL,GAAG,CAACM,KAAJ,CAAU,GAAV,CAAZ;AACA,MAAIC,GAAG,GAAGF,KAAK,CAACA,KAAK,CAACH,MAAN,GAAe,CAAhB,CAAf;;AAEA,MAAID,OAAO,CAACP,WAAZ,EAAyB;AACvB;AACA,QAAIW,KAAK,CAACH,MAAN,GAAe,CAAnB,EAAsB;AACpB,aAAO,KAAP;AACD;;AAED,QAAI,CAAC,qFAAqFM,IAArF,CAA0FD,GAA1F,CAAL,EAAqG;AACnG,aAAO,KAAP;AACD,KARsB,CAQrB;;;AAGF,QAAI,KAAKC,IAAL,CAAUD,GAAV,CAAJ,EAAoB;AAClB,aAAO,KAAP;AACD;AACF,GAhC0C,CAgCzC;;;AAGF,MAAI,CAACN,OAAO,CAACJ,iBAAT,IAA8B,QAAQW,IAAR,CAAaD,GAAb,CAAlC,EAAqD;AACnD,WAAO,KAAP;AACD;;AAED,SAAOF,KAAK,CAACI,KAAN,CAAY,UAAUC,IAAV,EAAgB;AACjC,QAAIA,IAAI,CAACR,MAAL,GAAc,EAAlB,EAAsB;AACpB,aAAO,KAAP;AACD;;AAED,QAAI,CAAC,8BAA8BM,IAA9B,CAAmCE,IAAnC,CAAL,EAA+C;AAC7C,aAAO,KAAP;AACD,KAPgC,CAO/B;;;AAGF,QAAI,kBAAkBF,IAAlB,CAAuBE,IAAvB,CAAJ,EAAkC;AAChC,aAAO,KAAP;AACD,KAZgC,CAY/B;;;AAGF,QAAI,QAAQF,IAAR,CAAaE,IAAb,CAAJ,EAAwB;AACtB,aAAO,KAAP;AACD;;AAED,QAAI,CAACT,OAAO,CAACN,iBAAT,IAA8B,IAAIa,IAAJ,CAASE,IAAT,CAAlC,EAAkD;AAChD,aAAO,KAAP;AACD;;AAED,WAAO,IAAP;AACD,GAxBM,CAAP;AAyBD","sourcesContent":["import assertString from './util/assertString';\nimport merge from './util/merge';\nvar default_fqdn_options = {\n  require_tld: true,\n  allow_underscores: false,\n  allow_trailing_dot: false,\n  allow_numeric_tld: false,\n  allow_wildcard: false\n};\nexport default function isFQDN(str, options) {\n  assertString(str);\n  options = merge(options, default_fqdn_options);\n  /* Remove the optional trailing dot before checking validity */\n\n  if (options.allow_trailing_dot && str[str.length - 1] === '.') {\n    str = str.substring(0, str.length - 1);\n  }\n  /* Remove the optional wildcard before checking validity */\n\n\n  if (options.allow_wildcard === true && str.indexOf('*.') === 0) {\n    str = str.substring(2);\n  }\n\n  var parts = str.split('.');\n  var tld = parts[parts.length - 1];\n\n  if (options.require_tld) {\n    // disallow fqdns without tld\n    if (parts.length < 2) {\n      return false;\n    }\n\n    if (!/^([a-z\\u00A1-\\u00A8\\u00AA-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]{2,}|xn[a-z0-9-]{2,})$/i.test(tld)) {\n      return false;\n    } // disallow spaces\n\n\n    if (/\\s/.test(tld)) {\n      return false;\n    }\n  } // reject numeric TLDs\n\n\n  if (!options.allow_numeric_tld && /^\\d+$/.test(tld)) {\n    return false;\n  }\n\n  return parts.every(function (part) {\n    if (part.length > 63) {\n      return false;\n    }\n\n    if (!/^[a-z_\\u00a1-\\uffff0-9-]+$/i.test(part)) {\n      return false;\n    } // disallow full-width chars\n\n\n    if (/[\\uff01-\\uff5e]/.test(part)) {\n      return false;\n    } // disallow parts starting or ending with hyphen\n\n\n    if (/^-|-$/.test(part)) {\n      return false;\n    }\n\n    if (!options.allow_underscores && /_/.test(part)) {\n      return false;\n    }\n\n    return true;\n  });\n}"]},"metadata":{},"sourceType":"module"}